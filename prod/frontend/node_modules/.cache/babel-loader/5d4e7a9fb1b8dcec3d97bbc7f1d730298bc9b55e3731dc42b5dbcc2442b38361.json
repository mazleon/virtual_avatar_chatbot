{"ast":null,"code":"var _jsxFileName = \"/Users/saniyasultanatuba/Downloads/Python-dev/llm/video_agent/prod/frontend/src/SimpleApp.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './index.css';\n\n// API endpoint configuration\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:5000';\nfunction SimpleApp() {\n  _s();\n  // State variables\n  const [isRecording, setIsRecording] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [messages, setMessages] = useState([{\n    sender: 'System',\n    text: 'Welcome to the Voice Agent demo. Click \"Start Recording\" to begin.'\n  }]);\n  const [audioStream, setAudioStream] = useState(null);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [audioChunks, setAudioChunks] = useState([]);\n  const [apiStatus, setApiStatus] = useState('unknown');\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [volume, setVolume] = useState(0);\n\n  // Refs\n  const timerRef = useRef(null);\n  const animationRef = useRef(null);\n  const audioAnalyserRef = useRef(null);\n  const audioDataRef = useRef(null);\n  const messagesEndRef = useRef(null);\n\n  // Check API connection on mount\n  useEffect(() => {\n    checkApiConnection();\n\n    // Clean up on unmount\n    return () => {\n      if (timerRef.current) clearInterval(timerRef.current);\n      if (animationRef.current) cancelAnimationFrame(animationRef.current);\n      if (audioStream) {\n        audioStream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, []);\n\n  // Auto-scroll to the bottom of messages\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n\n  // Format recording time as MM:SS\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60).toString().padStart(2, '0');\n    const secs = (seconds % 60).toString().padStart(2, '0');\n    return `${mins}:${secs}`;\n  };\n\n  // Check if the API server is running\n  const checkApiConnection = async () => {\n    try {\n      // Use AbortController to set a timeout for the fetch request\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout\n\n      const response = await fetch(`${API_BASE_URL}/health`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json'\n        },\n        signal: controller.signal,\n        mode: 'cors'\n      });\n      clearTimeout(timeoutId);\n      if (response.ok) {\n        setApiStatus('connected');\n        addMessage('System', 'Connected to API server successfully.');\n      } else {\n        setApiStatus('error');\n        addMessage('System', `Error connecting to API server: ${response.status} ${response.statusText}`);\n      }\n    } catch (err) {\n      console.error('API connection error:', err);\n      setApiStatus('error');\n\n      // More user-friendly error message\n      if (err.name === 'AbortError') {\n        addMessage('System', 'Connection to API server timed out. Please check if the server is running.');\n      } else if (err.message.includes('Failed to fetch')) {\n        addMessage('System', 'Cannot reach API server. Please make sure the FastAPI server is running at port 5000.');\n      } else {\n        addMessage('System', `Error connecting to API server: ${err.message}`);\n      }\n    }\n  };\n\n  // Start recording from microphone\n  const startRecording = async () => {\n    try {\n      // Clear previous audio chunks\n      setAudioChunks([]);\n\n      // Request access to the microphone\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      setAudioStream(stream);\n\n      // Set up audio analysis for visualization\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      const analyser = audioContext.createAnalyser();\n      analyser.fftSize = 256;\n      const audioSource = audioContext.createMediaStreamSource(stream);\n      audioSource.connect(analyser);\n\n      // Store the analyser for later use\n      audioAnalyserRef.current = analyser;\n      audioDataRef.current = new Uint8Array(analyser.frequencyBinCount);\n\n      // Start visualization\n      visualizeAudio();\n\n      // Create a new MediaRecorder instance\n      const recorder = new MediaRecorder(stream, {\n        mimeType: 'audio/webm'\n      });\n      setMediaRecorder(recorder);\n\n      // Event handler for when data is available\n      recorder.ondataavailable = e => {\n        if (e.data.size > 0) {\n          setAudioChunks(chunks => [...chunks, e.data]);\n        }\n      };\n\n      // Start recording\n      recorder.start(200); // Collect data every 200ms\n      setIsRecording(true);\n      addMessage('System', 'Recording started. Speak now...');\n\n      // Start timer\n      setRecordingTime(0);\n      timerRef.current = setInterval(() => {\n        setRecordingTime(prevTime => prevTime + 1);\n      }, 1000);\n    } catch (err) {\n      console.error('Error starting recording:', err);\n      addMessage('System', `Error starting recording: ${err.message}`);\n    }\n  };\n\n  // Visualize audio input\n  const visualizeAudio = () => {\n    if (!audioAnalyserRef.current) return;\n    const analyser = audioAnalyserRef.current;\n    const dataArray = audioDataRef.current;\n\n    // Get volume data\n    analyser.getByteFrequencyData(dataArray);\n\n    // Calculate volume level (average of frequency data)\n    const average = dataArray.reduce((acc, val) => acc + val, 0) / dataArray.length;\n    setVolume(average);\n\n    // Continue animation\n    animationRef.current = requestAnimationFrame(visualizeAudio);\n  };\n\n  // Stop recording\n  const stopRecording = () => {\n    if (mediaRecorder && isRecording) {\n      // Stop the recording\n      mediaRecorder.stop();\n      setIsRecording(false);\n      addMessage('System', 'Recording stopped. Processing audio...');\n\n      // Stop the timer\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n        timerRef.current = null;\n      }\n\n      // Stop the visualization\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n        animationRef.current = null;\n      }\n\n      // Stop all tracks in the stream\n      if (audioStream) {\n        audioStream.getTracks().forEach(track => track.stop());\n        setAudioStream(null);\n      }\n\n      // Process the recorded audio after a short delay to ensure all chunks are collected\n      setTimeout(() => {\n        if (audioChunks.length > 0) {\n          const audioBlob = new Blob(audioChunks, {\n            type: 'audio/webm'\n          });\n          processAudio(audioBlob);\n        } else {\n          addMessage('System', 'No audio recorded. Please try again.');\n        }\n      }, 300);\n    }\n  };\n\n  // Process audio with the API\n  const processAudio = async audioBlob => {\n    try {\n      setIsProcessing(true);\n      addMessage('System', 'Processing audio...');\n\n      // Create a FormData object to send the audio file\n      const formData = new FormData();\n      formData.append('audio', audioBlob);\n\n      // Send the audio to the backend for processing\n      const response = await fetch(`${API_BASE_URL}/api/process-audio`, {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        let errorMessage = 'Failed to process audio';\n        try {\n          const errorData = JSON.parse(errorText);\n          errorMessage = errorData.detail || errorMessage;\n        } catch (e) {\n          // If parsing fails, use the raw text\n          errorMessage = errorText || errorMessage;\n        }\n        throw new Error(errorMessage);\n      }\n      const data = await response.json();\n\n      // Add user message with transcribed text\n      addMessage('User', data.user_text);\n\n      // Add agent response\n      addMessage('Agent', data.response_text);\n\n      // Play the audio response\n      if (data.audio_id) {\n        const audioUrl = `${API_BASE_URL}/audio/${data.audio_id}.mp3`;\n        playAudioFromUrl(audioUrl);\n      }\n    } catch (err) {\n      console.error('Error processing audio:', err);\n      addMessage('System', `Error processing audio: ${err.message}`);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  // Play audio from URL\n  const playAudioFromUrl = url => {\n    // Create an audio element to play the response\n    const audio = new Audio(url);\n\n    // Add event listeners\n    audio.addEventListener('play', () => {\n      addMessage('System', 'Playing audio response...');\n    });\n    audio.addEventListener('ended', () => {\n      addMessage('System', 'Audio response finished.');\n    });\n    audio.addEventListener('error', e => {\n      console.error('Error playing audio:', e);\n      addMessage('System', 'Error playing audio response.');\n    });\n\n    // Play the audio\n    audio.play().catch(err => {\n      console.error('Error playing audio:', err);\n      addMessage('System', `Error playing audio: ${err.message}`);\n    });\n  };\n\n  // Add a message to the conversation\n  const addMessage = (sender, text) => {\n    setMessages(prevMessages => [...prevMessages, {\n      sender,\n      text\n    }]);\n  };\n\n  // Render the UI\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-layout\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"avatar-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title-bar\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Modhumoti Bank PLC\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"avatar-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"virtual-avatar\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Virtual Avatar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 15\n            }, this), isRecording && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"recording-indicator\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pulse-indicator\",\n                children: \"\\uD83D\\uDD34 Recording\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 298,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"recording-time\",\n                children: formatTime(recordingTime)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 299,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"volume-meter\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"volume-level\",\n                  style: {\n                    width: `${Math.min(100, volume)}%`\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 301,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 300,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 17\n            }, this), isProcessing && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"processing-indicator\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"spinner\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 311,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Processing...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 312,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"avatar-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: isRecording ? stopRecording : startRecording,\n            className: isRecording ? 'stop' : 'start',\n            disabled: isProcessing || apiStatus !== 'connected',\n            children: isRecording ? 'Stop Recording' : 'Start Recording'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"action-button\",\n            children: \"Help\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"connection-status\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `status-indicator ${apiStatus}`,\n            children: [\"Connection Status: \", apiStatus === 'connected' ? 'Connected' : 'Disconnected', apiStatus === 'error' && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: checkApiConnection,\n              className: \"retry-button\",\n              children: \"Connect\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"conversation\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"messages\",\n            children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `message ${msg.sender.toLowerCase()}`,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"sender\",\n                children: msg.sender\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 348,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text\",\n                children: msg.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 349,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 17\n            }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: messagesEndRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Type your message here...\",\n            disabled: isRecording || isProcessing\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"send-button\",\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 286,\n    columnNumber: 5\n  }, this);\n}\n_s(SimpleApp, \"Br6clnav4jdznMUnl3YXufcp/Mw=\");\n_c = SimpleApp;\nexport default SimpleApp;\nvar _c;\n$RefreshReg$(_c, \"SimpleApp\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","API_BASE_URL","SimpleApp","_s","isRecording","setIsRecording","isProcessing","setIsProcessing","messages","setMessages","sender","text","audioStream","setAudioStream","mediaRecorder","setMediaRecorder","audioChunks","setAudioChunks","apiStatus","setApiStatus","recordingTime","setRecordingTime","volume","setVolume","timerRef","animationRef","audioAnalyserRef","audioDataRef","messagesEndRef","checkApiConnection","current","clearInterval","cancelAnimationFrame","getTracks","forEach","track","stop","_messagesEndRef$curre","scrollIntoView","behavior","formatTime","seconds","mins","Math","floor","toString","padStart","secs","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","method","headers","signal","mode","clearTimeout","ok","addMessage","status","statusText","err","console","error","name","message","includes","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","audioContext","window","AudioContext","webkitAudioContext","analyser","createAnalyser","fftSize","audioSource","createMediaStreamSource","connect","Uint8Array","frequencyBinCount","visualizeAudio","recorder","MediaRecorder","mimeType","ondataavailable","e","data","size","chunks","start","setInterval","prevTime","dataArray","getByteFrequencyData","average","reduce","acc","val","length","requestAnimationFrame","stopRecording","audioBlob","Blob","type","processAudio","formData","FormData","append","body","errorText","errorMessage","errorData","JSON","parse","detail","Error","json","user_text","response_text","audio_id","audioUrl","playAudioFromUrl","url","Audio","addEventListener","play","catch","prevMessages","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","width","min","onClick","disabled","map","msg","index","toLowerCase","ref","placeholder","_c","$RefreshReg$"],"sources":["/Users/saniyasultanatuba/Downloads/Python-dev/llm/video_agent/prod/frontend/src/SimpleApp.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './index.css';\n\n// API endpoint configuration\nconst API_BASE_URL = 'http://localhost:5000';\n\nfunction SimpleApp() {\n  // State variables\n  const [isRecording, setIsRecording] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [messages, setMessages] = useState([\n    { sender: 'System', text: 'Welcome to the Voice Agent demo. Click \"Start Recording\" to begin.' }\n  ]);\n  const [audioStream, setAudioStream] = useState(null);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [audioChunks, setAudioChunks] = useState([]);\n  const [apiStatus, setApiStatus] = useState('unknown');\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [volume, setVolume] = useState(0);\n  \n  // Refs\n  const timerRef = useRef(null);\n  const animationRef = useRef(null);\n  const audioAnalyserRef = useRef(null);\n  const audioDataRef = useRef(null);\n  const messagesEndRef = useRef(null);\n  \n  // Check API connection on mount\n  useEffect(() => {\n    checkApiConnection();\n    \n    // Clean up on unmount\n    return () => {\n      if (timerRef.current) clearInterval(timerRef.current);\n      if (animationRef.current) cancelAnimationFrame(animationRef.current);\n      if (audioStream) {\n        audioStream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, []);\n  \n  // Auto-scroll to the bottom of messages\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n  \n  // Format recording time as MM:SS\n  const formatTime = (seconds) => {\n    const mins = Math.floor(seconds / 60).toString().padStart(2, '0');\n    const secs = (seconds % 60).toString().padStart(2, '0');\n    return `${mins}:${secs}`;\n  };\n  \n  // Check if the API server is running\n  const checkApiConnection = async () => {\n    try {\n      // Use AbortController to set a timeout for the fetch request\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout\n      \n      const response = await fetch(`${API_BASE_URL}/health`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n        },\n        signal: controller.signal,\n        mode: 'cors',\n      });\n      \n      clearTimeout(timeoutId);\n      \n      if (response.ok) {\n        setApiStatus('connected');\n        addMessage('System', 'Connected to API server successfully.');\n      } else {\n        setApiStatus('error');\n        addMessage('System', `Error connecting to API server: ${response.status} ${response.statusText}`);\n      }\n    } catch (err) {\n      console.error('API connection error:', err);\n      setApiStatus('error');\n      \n      // More user-friendly error message\n      if (err.name === 'AbortError') {\n        addMessage('System', 'Connection to API server timed out. Please check if the server is running.');\n      } else if (err.message.includes('Failed to fetch')) {\n        addMessage('System', 'Cannot reach API server. Please make sure the FastAPI server is running at port 5000.');\n      } else {\n        addMessage('System', `Error connecting to API server: ${err.message}`);\n      }\n    }\n  };\n  \n  // Start recording from microphone\n  const startRecording = async () => {\n    try {\n      // Clear previous audio chunks\n      setAudioChunks([]);\n      \n      // Request access to the microphone\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      setAudioStream(stream);\n      \n      // Set up audio analysis for visualization\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      const analyser = audioContext.createAnalyser();\n      analyser.fftSize = 256;\n      const audioSource = audioContext.createMediaStreamSource(stream);\n      audioSource.connect(analyser);\n      \n      // Store the analyser for later use\n      audioAnalyserRef.current = analyser;\n      audioDataRef.current = new Uint8Array(analyser.frequencyBinCount);\n      \n      // Start visualization\n      visualizeAudio();\n      \n      // Create a new MediaRecorder instance\n      const recorder = new MediaRecorder(stream, { mimeType: 'audio/webm' });\n      setMediaRecorder(recorder);\n      \n      // Event handler for when data is available\n      recorder.ondataavailable = (e) => {\n        if (e.data.size > 0) {\n          setAudioChunks(chunks => [...chunks, e.data]);\n        }\n      };\n      \n      // Start recording\n      recorder.start(200); // Collect data every 200ms\n      setIsRecording(true);\n      addMessage('System', 'Recording started. Speak now...');\n      \n      // Start timer\n      setRecordingTime(0);\n      timerRef.current = setInterval(() => {\n        setRecordingTime(prevTime => prevTime + 1);\n      }, 1000);\n      \n    } catch (err) {\n      console.error('Error starting recording:', err);\n      addMessage('System', `Error starting recording: ${err.message}`);\n    }\n  };\n  \n  // Visualize audio input\n  const visualizeAudio = () => {\n    if (!audioAnalyserRef.current) return;\n    \n    const analyser = audioAnalyserRef.current;\n    const dataArray = audioDataRef.current;\n    \n    // Get volume data\n    analyser.getByteFrequencyData(dataArray);\n    \n    // Calculate volume level (average of frequency data)\n    const average = dataArray.reduce((acc, val) => acc + val, 0) / dataArray.length;\n    setVolume(average);\n    \n    // Continue animation\n    animationRef.current = requestAnimationFrame(visualizeAudio);\n  };\n  \n  // Stop recording\n  const stopRecording = () => {\n    if (mediaRecorder && isRecording) {\n      // Stop the recording\n      mediaRecorder.stop();\n      setIsRecording(false);\n      addMessage('System', 'Recording stopped. Processing audio...');\n      \n      // Stop the timer\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n        timerRef.current = null;\n      }\n      \n      // Stop the visualization\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n        animationRef.current = null;\n      }\n      \n      // Stop all tracks in the stream\n      if (audioStream) {\n        audioStream.getTracks().forEach(track => track.stop());\n        setAudioStream(null);\n      }\n      \n      // Process the recorded audio after a short delay to ensure all chunks are collected\n      setTimeout(() => {\n        if (audioChunks.length > 0) {\n          const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });\n          processAudio(audioBlob);\n        } else {\n          addMessage('System', 'No audio recorded. Please try again.');\n        }\n      }, 300);\n    }\n  };\n  \n  // Process audio with the API\n  const processAudio = async (audioBlob) => {\n    try {\n      setIsProcessing(true);\n      addMessage('System', 'Processing audio...');\n      \n      // Create a FormData object to send the audio file\n      const formData = new FormData();\n      formData.append('audio', audioBlob);\n      \n      // Send the audio to the backend for processing\n      const response = await fetch(`${API_BASE_URL}/api/process-audio`, {\n        method: 'POST',\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        let errorMessage = 'Failed to process audio';\n        try {\n          const errorData = JSON.parse(errorText);\n          errorMessage = errorData.detail || errorMessage;\n        } catch (e) {\n          // If parsing fails, use the raw text\n          errorMessage = errorText || errorMessage;\n        }\n        throw new Error(errorMessage);\n      }\n      \n      const data = await response.json();\n      \n      // Add user message with transcribed text\n      addMessage('User', data.user_text);\n      \n      // Add agent response\n      addMessage('Agent', data.response_text);\n      \n      // Play the audio response\n      if (data.audio_id) {\n        const audioUrl = `${API_BASE_URL}/audio/${data.audio_id}.mp3`;\n        playAudioFromUrl(audioUrl);\n      }\n      \n    } catch (err) {\n      console.error('Error processing audio:', err);\n      addMessage('System', `Error processing audio: ${err.message}`);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  \n  // Play audio from URL\n  const playAudioFromUrl = (url) => {\n    // Create an audio element to play the response\n    const audio = new Audio(url);\n    \n    // Add event listeners\n    audio.addEventListener('play', () => {\n      addMessage('System', 'Playing audio response...');\n    });\n    \n    audio.addEventListener('ended', () => {\n      addMessage('System', 'Audio response finished.');\n    });\n    \n    audio.addEventListener('error', (e) => {\n      console.error('Error playing audio:', e);\n      addMessage('System', 'Error playing audio response.');\n    });\n    \n    // Play the audio\n    audio.play().catch(err => {\n      console.error('Error playing audio:', err);\n      addMessage('System', `Error playing audio: ${err.message}`);\n    });\n  };\n  \n  // Add a message to the conversation\n  const addMessage = (sender, text) => {\n    setMessages(prevMessages => [...prevMessages, { sender, text }]);\n  };\n  \n  // Render the UI\n  return (\n    <div className=\"app-container\">\n      <div className=\"main-layout\">\n        <div className=\"avatar-section\">\n          <div className=\"title-bar\">\n            <h1>Modhumoti Bank PLC</h1>\n          </div>\n          \n          <div className=\"avatar-container\">\n            <div className=\"virtual-avatar\">\n              <h2>Virtual Avatar</h2>\n              {isRecording && (\n                <div className=\"recording-indicator\">\n                  <div className=\"pulse-indicator\">🔴 Recording</div>\n                  <div className=\"recording-time\">{formatTime(recordingTime)}</div>\n                  <div className=\"volume-meter\">\n                    <div \n                      className=\"volume-level\" \n                      style={{ width: `${Math.min(100, volume)}%` }}\n                    />\n                  </div>\n                </div>\n              )}\n              \n              {isProcessing && (\n                <div className=\"processing-indicator\">\n                  <div className=\"spinner\"></div>\n                  <span>Processing...</span>\n                </div>\n              )}\n            </div>\n          </div>\n          \n          <div className=\"avatar-controls\">\n            <button \n              onClick={isRecording ? stopRecording : startRecording}\n              className={isRecording ? 'stop' : 'start'}\n              disabled={isProcessing || apiStatus !== 'connected'}\n            >\n              {isRecording ? 'Stop Recording' : 'Start Recording'}\n            </button>\n            <button className=\"action-button\">\n              Help\n            </button>\n          </div>\n        </div>\n        \n        <div className=\"chat-section\">\n          <div className=\"connection-status\">\n            <div className={`status-indicator ${apiStatus}`}>\n              Connection Status: {apiStatus === 'connected' ? 'Connected' : 'Disconnected'}\n              {apiStatus === 'error' && (\n                <button onClick={checkApiConnection} className=\"retry-button\">\n                  Connect\n                </button>\n              )}\n            </div>\n          </div>\n          \n          <div className=\"conversation\">\n            <div className=\"messages\">\n              {messages.map((msg, index) => (\n                <div key={index} className={`message ${msg.sender.toLowerCase()}`}>\n                  <div className=\"sender\">{msg.sender}</div>\n                  <div className=\"text\">{msg.text}</div>\n                </div>\n              ))}\n              <div ref={messagesEndRef} />\n            </div>\n          </div>\n          \n          <div className=\"message-input\">\n            <input \n              type=\"text\" \n              placeholder=\"Type your message here...\"\n              disabled={isRecording || isProcessing}\n            />\n            <button className=\"send-button\">\n              Send\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SimpleApp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}