{"ast":null,"code":"var _jsxFileName = \"/Users/saniyasultanatuba/Downloads/Python-dev/llm/video_agent/prod/frontend/src/SimpleApp.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './index.css';\n\n// Import LiveKit components\nimport { LiveKitRoom, AudioRenderer, useRoom, useParticipant } from '@livekit/components-react';\nimport '@livekit/components-styles';\n\n// API endpoint configuration\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:7880';\nconst TOKEN_ENDPOINT = 'http://localhost:5000/api/token';\n\n// LiveKit configuration\nconst LIVEKIT_URL = 'ws://localhost:7880';\nconst ROOM_NAME = 'voice-agent-room';\nconst PARTICIPANT_NAME = 'user';\n\n// Bank-specific configuration\nconst BANK_NAME = 'Modhumoti Bank PLC';\nconst ASSISTANT_NAME = 'Virtual Banking Assistant';\nfunction SimpleApp() {\n  _s();\n  // State variables\n  const [isRecording, setIsRecording] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [messages, setMessages] = useState([{\n    sender: 'System',\n    text: 'Welcome to the Voice Agent demo. Click \"Start Recording\" to begin.'\n  }]);\n  const [audioStream, setAudioStream] = useState(null);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [audioChunks, setAudioChunks] = useState([]);\n  const [apiStatus, setApiStatus] = useState('unknown');\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [volume, setVolume] = useState(0);\n  const [textInput, setTextInput] = useState('');\n\n  // LiveKit state\n  const [token, setToken] = useState(null);\n  const [connected, setConnected] = useState(false);\n  const [roomError, setRoomError] = useState(null);\n\n  // Refs\n  const timerRef = useRef(null);\n  const animationRef = useRef(null);\n  const audioAnalyserRef = useRef(null);\n  const audioDataRef = useRef(null);\n  const messagesEndRef = useRef(null);\n\n  // Check API connection on mount\n  useEffect(() => {\n    checkApiConnection();\n\n    // Clean up on unmount\n    return () => {\n      if (timerRef.current) clearInterval(timerRef.current);\n      if (animationRef.current) cancelAnimationFrame(animationRef.current);\n      if (audioStream) {\n        audioStream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, []);\n\n  // Auto-scroll to the bottom of messages\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n\n  // Format recording time as MM:SS\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60).toString().padStart(2, '0');\n    const secs = (seconds % 60).toString().padStart(2, '0');\n    return `${mins}:${secs}`;\n  };\n\n  // Handle sending text messages\n  const handleSendText = async () => {\n    if (!textInput.trim() || isProcessing) return;\n    setIsProcessing(true);\n    addMessage('You', textInput);\n    try {\n      // Simulate sending text to the API\n      // In a real implementation, you would send this to a text endpoint\n      // For now, we'll simulate a response\n      setTimeout(() => {\n        const simulatedResponse = \"Thank you for your message. As a virtual banking assistant for Modhumoti Bank, I'm here to help with your banking needs. How else can I assist you today?\";\n        addMessage('Agent', simulatedResponse);\n\n        // Play the response using text-to-speech\n        const utterance = new SpeechSynthesisUtterance(simulatedResponse);\n        utterance.rate = 1.0;\n        utterance.pitch = 1.0;\n        window.speechSynthesis.speak(utterance);\n        setIsProcessing(false);\n      }, 1500);\n\n      // Clear the text input\n      setTextInput('');\n    } catch (error) {\n      console.error('Error sending text message:', error);\n      addMessage('System', 'Error processing your message. Please try again.');\n      setIsProcessing(false);\n    }\n  };\n\n  // Check if the API server is running\n  const checkApiConnection = async () => {\n    try {\n      // Use AbortController to set a timeout for the fetch request\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout\n\n      const response = await fetch(`${API_BASE_URL}/health`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json'\n        },\n        signal: controller.signal,\n        mode: 'cors'\n      });\n      clearTimeout(timeoutId);\n      if (response.ok) {\n        setApiStatus('connected');\n        addMessage('System', 'Connected to API server successfully.');\n      } else {\n        setApiStatus('error');\n        addMessage('System', `Error connecting to API server: ${response.status} ${response.statusText}`);\n      }\n    } catch (err) {\n      console.error('API connection error:', err);\n      setApiStatus('error');\n\n      // More user-friendly error message\n      if (err.name === 'AbortError') {\n        addMessage('System', 'Connection to API server timed out. Please check if the server is running.');\n      } else if (err.message.includes('Failed to fetch')) {\n        addMessage('System', 'Cannot reach API server. Please make sure the FastAPI server is running at port 5000.');\n      } else {\n        addMessage('System', `Error connecting to API server: ${err.message}`);\n      }\n    }\n  };\n\n  // Start recording from microphone\n  const startRecording = async () => {\n    try {\n      // Clear previous audio chunks\n      setAudioChunks([]);\n\n      // Request access to the microphone\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      setAudioStream(stream);\n\n      // Set up audio analysis for visualization\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      const analyser = audioContext.createAnalyser();\n      analyser.fftSize = 256;\n      const audioSource = audioContext.createMediaStreamSource(stream);\n      audioSource.connect(analyser);\n\n      // Store the analyser for later use\n      audioAnalyserRef.current = analyser;\n      audioDataRef.current = new Uint8Array(analyser.frequencyBinCount);\n\n      // Start visualization\n      visualizeAudio();\n\n      // Create a new MediaRecorder instance\n      const recorder = new MediaRecorder(stream, {\n        mimeType: 'audio/webm'\n      });\n      setMediaRecorder(recorder);\n\n      // Event handler for when data is available\n      recorder.ondataavailable = e => {\n        if (e.data.size > 0) {\n          setAudioChunks(chunks => [...chunks, e.data]);\n        }\n      };\n\n      // Start recording\n      recorder.start(200); // Collect data every 200ms\n      setIsRecording(true);\n      addMessage('System', 'Recording started. Speak now...');\n\n      // Start timer\n      setRecordingTime(0);\n      timerRef.current = setInterval(() => {\n        setRecordingTime(prevTime => prevTime + 1);\n      }, 1000);\n    } catch (err) {\n      console.error('Error starting recording:', err);\n      addMessage('System', `Error starting recording: ${err.message}`);\n    }\n  };\n\n  // Visualize audio input\n  const visualizeAudio = () => {\n    if (!audioAnalyserRef.current) return;\n    const analyser = audioAnalyserRef.current;\n    const dataArray = audioDataRef.current;\n\n    // Get volume data\n    analyser.getByteFrequencyData(dataArray);\n\n    // Calculate volume level (average of frequency data)\n    const average = dataArray.reduce((acc, val) => acc + val, 0) / dataArray.length;\n    setVolume(average);\n\n    // Continue animation\n    animationRef.current = requestAnimationFrame(visualizeAudio);\n  };\n\n  // Stop recording\n  const stopRecording = () => {\n    if (mediaRecorder && isRecording) {\n      // Stop the recording\n      mediaRecorder.stop();\n      setIsRecording(false);\n      addMessage('System', 'Recording stopped. Processing audio...');\n\n      // Stop the timer\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n        timerRef.current = null;\n      }\n\n      // Stop the visualization\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n        animationRef.current = null;\n      }\n\n      // Stop all tracks in the stream\n      if (audioStream) {\n        audioStream.getTracks().forEach(track => track.stop());\n        setAudioStream(null);\n      }\n\n      // Process the recorded audio after a short delay to ensure all chunks are collected\n      setTimeout(() => {\n        if (audioChunks.length > 0) {\n          const audioBlob = new Blob(audioChunks, {\n            type: 'audio/webm'\n          });\n          processAudio(audioBlob);\n        } else {\n          addMessage('System', 'No audio recorded. Please try again.');\n        }\n      }, 300);\n    }\n  };\n\n  // Process audio with the API\n  const processAudio = async audioBlob => {\n    try {\n      setIsProcessing(true);\n      addMessage('System', 'Processing audio...');\n\n      // Create a FormData object to send the audio file\n      const formData = new FormData();\n      formData.append('audio', audioBlob);\n\n      // Send the audio to the backend for processing\n      const response = await fetch(`${API_BASE_URL}/api/process-audio`, {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        let errorMessage = 'Failed to process audio';\n        try {\n          const errorData = JSON.parse(errorText);\n          errorMessage = errorData.detail || errorMessage;\n        } catch (e) {\n          // If parsing fails, use the raw text\n          errorMessage = errorText || errorMessage;\n        }\n        throw new Error(errorMessage);\n      }\n      const data = await response.json();\n\n      // Add user message with transcribed text\n      addMessage('User', data.user_text);\n\n      // Add agent response\n      addMessage('Agent', data.response_text);\n\n      // Play the audio response\n      if (data.audio_id) {\n        const audioUrl = `${API_BASE_URL}/audio/${data.audio_id}.mp3`;\n        playAudioFromUrl(audioUrl);\n      }\n    } catch (err) {\n      console.error('Error processing audio:', err);\n      addMessage('System', `Error processing audio: ${err.message}`);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  // Play audio from URL\n  const playAudioFromUrl = url => {\n    // Create an audio element to play the response\n    const audio = new Audio(url);\n\n    // Add event listeners\n    audio.addEventListener('play', () => {\n      addMessage('System', 'Playing audio response...');\n    });\n    audio.addEventListener('ended', () => {\n      addMessage('System', 'Audio response finished.');\n    });\n    audio.addEventListener('error', e => {\n      console.error('Error playing audio:', e);\n      addMessage('System', 'Error playing audio response.');\n    });\n\n    // Play the audio\n    audio.play().catch(err => {\n      console.error('Error playing audio:', err);\n      addMessage('System', `Error playing audio: ${err.message}`);\n    });\n  };\n\n  // Add a message to the conversation with typing animation effect\n  const addMessage = (sender, text) => {\n    // For agent messages, show typing animation\n    if (sender === 'Agent') {\n      // First add a typing indicator\n      setMessages(prevMessages => [...prevMessages, {\n        sender,\n        text: '...',\n        isTyping: true\n      }]);\n\n      // Then gradually reveal the text\n      let visibleLength = 0;\n      const textLength = text.length;\n      const typingInterval = setInterval(() => {\n        visibleLength += 1;\n        if (visibleLength <= textLength) {\n          setMessages(prevMessages => {\n            // Find and update the typing message\n            const updatedMessages = [...prevMessages];\n            const typingIndex = updatedMessages.findIndex(msg => msg.isTyping);\n            if (typingIndex !== -1) {\n              updatedMessages[typingIndex] = {\n                sender,\n                text: text.substring(0, visibleLength),\n                isTyping: visibleLength < textLength\n              };\n            }\n            return updatedMessages;\n          });\n        } else {\n          clearInterval(typingInterval);\n        }\n      }, 30); // Adjust typing speed here\n    } else {\n      // For non-agent messages, add immediately\n      setMessages(prevMessages => [...prevMessages, {\n        sender,\n        text\n      }]);\n    }\n  };\n\n  // Render the UI\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-layout\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"avatar-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title-bar\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: BANK_NAME\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"avatar-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"virtual-avatar\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar-image\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `avatar-circle ${isRecording ? 'pulse' : ''}`,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"avatar-icon\",\n                  children: /*#__PURE__*/_jsxDEV(\"svg\", {\n                    viewBox: \"0 0 24 24\",\n                    fill: \"none\",\n                    xmlns: \"http://www.w3.org/2000/svg\",\n                    children: /*#__PURE__*/_jsxDEV(\"path\", {\n                      d: \"M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM12 5C13.66 5 15 6.34 15 8C15 9.66 13.66 11 12 11C10.34 11 9 9.66 9 8C9 6.34 10.34 5 12 5ZM12 19.2C9.5 19.2 7.29 17.92 6 15.98C6.03 13.99 10 12.9 12 12.9C13.99 12.9 17.97 13.99 18 15.98C16.71 17.92 14.5 19.2 12 19.2Z\",\n                      fill: \"#2c3e50\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 386,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 385,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 384,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 383,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: ASSISTANT_NAME\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 15\n            }, this), isRecording && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"recording-indicator\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pulse-indicator\",\n                children: \"\\uD83D\\uDD34 Recording\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"recording-time\",\n                children: formatTime(recordingTime)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 395,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"volume-meter\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"volume-level\",\n                  style: {\n                    width: `${Math.min(100, volume)}%`\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 397,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 396,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 17\n            }, this), isProcessing && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"processing-indicator\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"spinner\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 407,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Processing...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 408,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"avatar-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: isRecording ? stopRecording : startRecording,\n            className: isRecording ? 'stop' : 'start',\n            disabled: isProcessing || apiStatus !== 'connected',\n            children: isRecording ? 'Stop Recording' : 'Start Recording'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"action-button\",\n            children: \"Help\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"connection-status\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `status-indicator ${apiStatus}`,\n            children: [\"Connection Status: \", apiStatus === 'connected' ? 'Connected' : 'Disconnected', apiStatus === 'error' && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: checkApiConnection,\n              className: \"retry-button\",\n              children: \"Connect\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 433,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"conversation\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"messages\",\n            children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `message ${msg.sender.toLowerCase()} ${msg.isTyping ? 'typing' : ''}`,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"sender\",\n                children: msg.sender\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 444,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text\",\n                children: [msg.text, msg.isTyping && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"typing-cursor\",\n                  children: \"|\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 447,\n                  columnNumber: 38\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 445,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 443,\n              columnNumber: 17\n            }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: messagesEndRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 451,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Type your message here...\",\n            disabled: isRecording || isProcessing,\n            value: textInput,\n            onChange: e => setTextInput(e.target.value),\n            onKeyPress: e => e.key === 'Enter' && handleSendText()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"send-button\",\n            onClick: handleSendText,\n            disabled: isRecording || isProcessing || !textInput.trim(),\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 373,\n    columnNumber: 5\n  }, this);\n}\n_s(SimpleApp, \"dhLxSzIPzWBWjfVDo++KUDH1PO4=\");\n_c = SimpleApp;\nexport default SimpleApp;\nvar _c;\n$RefreshReg$(_c, \"SimpleApp\");","map":{"version":3,"names":["React","useState","useEffect","useRef","LiveKitRoom","AudioRenderer","useRoom","useParticipant","jsxDEV","_jsxDEV","API_BASE_URL","TOKEN_ENDPOINT","LIVEKIT_URL","ROOM_NAME","PARTICIPANT_NAME","BANK_NAME","ASSISTANT_NAME","SimpleApp","_s","isRecording","setIsRecording","isProcessing","setIsProcessing","messages","setMessages","sender","text","audioStream","setAudioStream","mediaRecorder","setMediaRecorder","audioChunks","setAudioChunks","apiStatus","setApiStatus","recordingTime","setRecordingTime","volume","setVolume","textInput","setTextInput","token","setToken","connected","setConnected","roomError","setRoomError","timerRef","animationRef","audioAnalyserRef","audioDataRef","messagesEndRef","checkApiConnection","current","clearInterval","cancelAnimationFrame","getTracks","forEach","track","stop","_messagesEndRef$curre","scrollIntoView","behavior","formatTime","seconds","mins","Math","floor","toString","padStart","secs","handleSendText","trim","addMessage","setTimeout","simulatedResponse","utterance","SpeechSynthesisUtterance","rate","pitch","window","speechSynthesis","speak","error","console","controller","AbortController","timeoutId","abort","response","fetch","method","headers","signal","mode","clearTimeout","ok","status","statusText","err","name","message","includes","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","audioContext","AudioContext","webkitAudioContext","analyser","createAnalyser","fftSize","audioSource","createMediaStreamSource","connect","Uint8Array","frequencyBinCount","visualizeAudio","recorder","MediaRecorder","mimeType","ondataavailable","e","data","size","chunks","start","setInterval","prevTime","dataArray","getByteFrequencyData","average","reduce","acc","val","length","requestAnimationFrame","stopRecording","audioBlob","Blob","type","processAudio","formData","FormData","append","body","errorText","errorMessage","errorData","JSON","parse","detail","Error","json","user_text","response_text","audio_id","audioUrl","playAudioFromUrl","url","Audio","addEventListener","play","catch","prevMessages","isTyping","visibleLength","textLength","typingInterval","updatedMessages","typingIndex","findIndex","msg","substring","className","children","fileName","_jsxFileName","lineNumber","columnNumber","viewBox","fill","xmlns","d","style","width","min","onClick","disabled","map","index","toLowerCase","ref","placeholder","value","onChange","target","onKeyPress","key","_c","$RefreshReg$"],"sources":["/Users/saniyasultanatuba/Downloads/Python-dev/llm/video_agent/prod/frontend/src/SimpleApp.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './index.css';\n\n// Import LiveKit components\nimport { LiveKitRoom, AudioRenderer, useRoom, useParticipant } from '@livekit/components-react';\nimport '@livekit/components-styles';\n\n// API endpoint configuration\nconst API_BASE_URL = 'http://localhost:7880';\nconst TOKEN_ENDPOINT = 'http://localhost:5000/api/token';\n\n// LiveKit configuration\nconst LIVEKIT_URL = 'ws://localhost:7880';\nconst ROOM_NAME = 'voice-agent-room';\nconst PARTICIPANT_NAME = 'user';\n\n// Bank-specific configuration\nconst BANK_NAME = 'Modhumoti Bank PLC';\nconst ASSISTANT_NAME = 'Virtual Banking Assistant';\n\nfunction SimpleApp() {\n  // State variables\n  const [isRecording, setIsRecording] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [messages, setMessages] = useState([\n    { sender: 'System', text: 'Welcome to the Voice Agent demo. Click \"Start Recording\" to begin.' }\n  ]);\n  const [audioStream, setAudioStream] = useState(null);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [audioChunks, setAudioChunks] = useState([]);\n  const [apiStatus, setApiStatus] = useState('unknown');\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [volume, setVolume] = useState(0);\n  const [textInput, setTextInput] = useState('');\n  \n  // LiveKit state\n  const [token, setToken] = useState(null);\n  const [connected, setConnected] = useState(false);\n  const [roomError, setRoomError] = useState(null);\n  \n  // Refs\n  const timerRef = useRef(null);\n  const animationRef = useRef(null);\n  const audioAnalyserRef = useRef(null);\n  const audioDataRef = useRef(null);\n  const messagesEndRef = useRef(null);\n  \n  // Check API connection on mount\n  useEffect(() => {\n    checkApiConnection();\n    \n    // Clean up on unmount\n    return () => {\n      if (timerRef.current) clearInterval(timerRef.current);\n      if (animationRef.current) cancelAnimationFrame(animationRef.current);\n      if (audioStream) {\n        audioStream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, []);\n  \n  // Auto-scroll to the bottom of messages\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n  \n  // Format recording time as MM:SS\n  const formatTime = (seconds) => {\n    const mins = Math.floor(seconds / 60).toString().padStart(2, '0');\n    const secs = (seconds % 60).toString().padStart(2, '0');\n    return `${mins}:${secs}`;\n  };\n  \n  // Handle sending text messages\n  const handleSendText = async () => {\n    if (!textInput.trim() || isProcessing) return;\n    \n    setIsProcessing(true);\n    addMessage('You', textInput);\n    \n    try {\n      // Simulate sending text to the API\n      // In a real implementation, you would send this to a text endpoint\n      // For now, we'll simulate a response\n      setTimeout(() => {\n        const simulatedResponse = \"Thank you for your message. As a virtual banking assistant for Modhumoti Bank, I'm here to help with your banking needs. How else can I assist you today?\";\n        addMessage('Agent', simulatedResponse);\n        \n        // Play the response using text-to-speech\n        const utterance = new SpeechSynthesisUtterance(simulatedResponse);\n        utterance.rate = 1.0;\n        utterance.pitch = 1.0;\n        window.speechSynthesis.speak(utterance);\n        \n        setIsProcessing(false);\n      }, 1500);\n      \n      // Clear the text input\n      setTextInput('');\n    } catch (error) {\n      console.error('Error sending text message:', error);\n      addMessage('System', 'Error processing your message. Please try again.');\n      setIsProcessing(false);\n    }\n  };\n  \n  // Check if the API server is running\n  const checkApiConnection = async () => {\n    try {\n      // Use AbortController to set a timeout for the fetch request\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout\n      \n      const response = await fetch(`${API_BASE_URL}/health`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n        },\n        signal: controller.signal,\n        mode: 'cors',\n      });\n      \n      clearTimeout(timeoutId);\n      \n      if (response.ok) {\n        setApiStatus('connected');\n        addMessage('System', 'Connected to API server successfully.');\n      } else {\n        setApiStatus('error');\n        addMessage('System', `Error connecting to API server: ${response.status} ${response.statusText}`);\n      }\n    } catch (err) {\n      console.error('API connection error:', err);\n      setApiStatus('error');\n      \n      // More user-friendly error message\n      if (err.name === 'AbortError') {\n        addMessage('System', 'Connection to API server timed out. Please check if the server is running.');\n      } else if (err.message.includes('Failed to fetch')) {\n        addMessage('System', 'Cannot reach API server. Please make sure the FastAPI server is running at port 5000.');\n      } else {\n        addMessage('System', `Error connecting to API server: ${err.message}`);\n      }\n    }\n  };\n  \n  // Start recording from microphone\n  const startRecording = async () => {\n    try {\n      // Clear previous audio chunks\n      setAudioChunks([]);\n      \n      // Request access to the microphone\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      setAudioStream(stream);\n      \n      // Set up audio analysis for visualization\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      const analyser = audioContext.createAnalyser();\n      analyser.fftSize = 256;\n      const audioSource = audioContext.createMediaStreamSource(stream);\n      audioSource.connect(analyser);\n      \n      // Store the analyser for later use\n      audioAnalyserRef.current = analyser;\n      audioDataRef.current = new Uint8Array(analyser.frequencyBinCount);\n      \n      // Start visualization\n      visualizeAudio();\n      \n      // Create a new MediaRecorder instance\n      const recorder = new MediaRecorder(stream, { mimeType: 'audio/webm' });\n      setMediaRecorder(recorder);\n      \n      // Event handler for when data is available\n      recorder.ondataavailable = (e) => {\n        if (e.data.size > 0) {\n          setAudioChunks(chunks => [...chunks, e.data]);\n        }\n      };\n      \n      // Start recording\n      recorder.start(200); // Collect data every 200ms\n      setIsRecording(true);\n      addMessage('System', 'Recording started. Speak now...');\n      \n      // Start timer\n      setRecordingTime(0);\n      timerRef.current = setInterval(() => {\n        setRecordingTime(prevTime => prevTime + 1);\n      }, 1000);\n      \n    } catch (err) {\n      console.error('Error starting recording:', err);\n      addMessage('System', `Error starting recording: ${err.message}`);\n    }\n  };\n  \n  // Visualize audio input\n  const visualizeAudio = () => {\n    if (!audioAnalyserRef.current) return;\n    \n    const analyser = audioAnalyserRef.current;\n    const dataArray = audioDataRef.current;\n    \n    // Get volume data\n    analyser.getByteFrequencyData(dataArray);\n    \n    // Calculate volume level (average of frequency data)\n    const average = dataArray.reduce((acc, val) => acc + val, 0) / dataArray.length;\n    setVolume(average);\n    \n    // Continue animation\n    animationRef.current = requestAnimationFrame(visualizeAudio);\n  };\n  \n  // Stop recording\n  const stopRecording = () => {\n    if (mediaRecorder && isRecording) {\n      // Stop the recording\n      mediaRecorder.stop();\n      setIsRecording(false);\n      addMessage('System', 'Recording stopped. Processing audio...');\n      \n      // Stop the timer\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n        timerRef.current = null;\n      }\n      \n      // Stop the visualization\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n        animationRef.current = null;\n      }\n      \n      // Stop all tracks in the stream\n      if (audioStream) {\n        audioStream.getTracks().forEach(track => track.stop());\n        setAudioStream(null);\n      }\n      \n      // Process the recorded audio after a short delay to ensure all chunks are collected\n      setTimeout(() => {\n        if (audioChunks.length > 0) {\n          const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });\n          processAudio(audioBlob);\n        } else {\n          addMessage('System', 'No audio recorded. Please try again.');\n        }\n      }, 300);\n    }\n  };\n  \n  // Process audio with the API\n  const processAudio = async (audioBlob) => {\n    try {\n      setIsProcessing(true);\n      addMessage('System', 'Processing audio...');\n      \n      // Create a FormData object to send the audio file\n      const formData = new FormData();\n      formData.append('audio', audioBlob);\n      \n      // Send the audio to the backend for processing\n      const response = await fetch(`${API_BASE_URL}/api/process-audio`, {\n        method: 'POST',\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        let errorMessage = 'Failed to process audio';\n        try {\n          const errorData = JSON.parse(errorText);\n          errorMessage = errorData.detail || errorMessage;\n        } catch (e) {\n          // If parsing fails, use the raw text\n          errorMessage = errorText || errorMessage;\n        }\n        throw new Error(errorMessage);\n      }\n      \n      const data = await response.json();\n      \n      // Add user message with transcribed text\n      addMessage('User', data.user_text);\n      \n      // Add agent response\n      addMessage('Agent', data.response_text);\n      \n      // Play the audio response\n      if (data.audio_id) {\n        const audioUrl = `${API_BASE_URL}/audio/${data.audio_id}.mp3`;\n        playAudioFromUrl(audioUrl);\n      }\n      \n    } catch (err) {\n      console.error('Error processing audio:', err);\n      addMessage('System', `Error processing audio: ${err.message}`);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  \n  // Play audio from URL\n  const playAudioFromUrl = (url) => {\n    // Create an audio element to play the response\n    const audio = new Audio(url);\n    \n    // Add event listeners\n    audio.addEventListener('play', () => {\n      addMessage('System', 'Playing audio response...');\n    });\n    \n    audio.addEventListener('ended', () => {\n      addMessage('System', 'Audio response finished.');\n    });\n    \n    audio.addEventListener('error', (e) => {\n      console.error('Error playing audio:', e);\n      addMessage('System', 'Error playing audio response.');\n    });\n    \n    // Play the audio\n    audio.play().catch(err => {\n      console.error('Error playing audio:', err);\n      addMessage('System', `Error playing audio: ${err.message}`);\n    });\n  };\n  \n  // Add a message to the conversation with typing animation effect\n  const addMessage = (sender, text) => {\n    // For agent messages, show typing animation\n    if (sender === 'Agent') {\n      // First add a typing indicator\n      setMessages(prevMessages => [...prevMessages, { sender, text: '...', isTyping: true }]);\n      \n      // Then gradually reveal the text\n      let visibleLength = 0;\n      const textLength = text.length;\n      const typingInterval = setInterval(() => {\n        visibleLength += 1;\n        \n        if (visibleLength <= textLength) {\n          setMessages(prevMessages => {\n            // Find and update the typing message\n            const updatedMessages = [...prevMessages];\n            const typingIndex = updatedMessages.findIndex(msg => msg.isTyping);\n            \n            if (typingIndex !== -1) {\n              updatedMessages[typingIndex] = {\n                sender,\n                text: text.substring(0, visibleLength),\n                isTyping: visibleLength < textLength\n              };\n            }\n            \n            return updatedMessages;\n          });\n        } else {\n          clearInterval(typingInterval);\n        }\n      }, 30); // Adjust typing speed here\n    } else {\n      // For non-agent messages, add immediately\n      setMessages(prevMessages => [...prevMessages, { sender, text }]);\n    }\n  };\n  \n  // Render the UI\n  return (\n    <div className=\"app-container\">\n      <div className=\"main-layout\">\n        <div className=\"avatar-section\">\n          <div className=\"title-bar\">\n            <h1>{BANK_NAME}</h1>\n          </div>\n          \n          <div className=\"avatar-container\">\n            <div className=\"virtual-avatar\">\n              <div className=\"avatar-image\">\n                <div className={`avatar-circle ${isRecording ? 'pulse' : ''}`}>\n                  <div className=\"avatar-icon\">\n                    <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                      <path d=\"M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM12 5C13.66 5 15 6.34 15 8C15 9.66 13.66 11 12 11C10.34 11 9 9.66 9 8C9 6.34 10.34 5 12 5ZM12 19.2C9.5 19.2 7.29 17.92 6 15.98C6.03 13.99 10 12.9 12 12.9C13.99 12.9 17.97 13.99 18 15.98C16.71 17.92 14.5 19.2 12 19.2Z\" fill=\"#2c3e50\"/>\n                    </svg>\n                  </div>\n                </div>\n              </div>\n              <h2>{ASSISTANT_NAME}</h2>\n              {isRecording && (\n                <div className=\"recording-indicator\">\n                  <div className=\"pulse-indicator\">🔴 Recording</div>\n                  <div className=\"recording-time\">{formatTime(recordingTime)}</div>\n                  <div className=\"volume-meter\">\n                    <div \n                      className=\"volume-level\" \n                      style={{ width: `${Math.min(100, volume)}%` }}\n                    />\n                  </div>\n                </div>\n              )}\n              \n              {isProcessing && (\n                <div className=\"processing-indicator\">\n                  <div className=\"spinner\"></div>\n                  <span>Processing...</span>\n                </div>\n              )}\n            </div>\n          </div>\n          \n          <div className=\"avatar-controls\">\n            <button \n              onClick={isRecording ? stopRecording : startRecording}\n              className={isRecording ? 'stop' : 'start'}\n              disabled={isProcessing || apiStatus !== 'connected'}\n            >\n              {isRecording ? 'Stop Recording' : 'Start Recording'}\n            </button>\n            <button className=\"action-button\">\n              Help\n            </button>\n          </div>\n        </div>\n        \n        <div className=\"chat-section\">\n          <div className=\"connection-status\">\n            <div className={`status-indicator ${apiStatus}`}>\n              Connection Status: {apiStatus === 'connected' ? 'Connected' : 'Disconnected'}\n              {apiStatus === 'error' && (\n                <button onClick={checkApiConnection} className=\"retry-button\">\n                  Connect\n                </button>\n              )}\n            </div>\n          </div>\n          \n          <div className=\"conversation\">\n            <div className=\"messages\">\n              {messages.map((msg, index) => (\n                <div key={index} className={`message ${msg.sender.toLowerCase()} ${msg.isTyping ? 'typing' : ''}`}>\n                  <div className=\"sender\">{msg.sender}</div>\n                  <div className=\"text\">\n                    {msg.text}\n                    {msg.isTyping && <span className=\"typing-cursor\">|</span>}\n                  </div>\n                </div>\n              ))}\n              <div ref={messagesEndRef} />\n            </div>\n          </div>\n          \n          <div className=\"message-input\">\n            <input \n              type=\"text\" \n              placeholder=\"Type your message here...\"\n              disabled={isRecording || isProcessing}\n              value={textInput}\n              onChange={(e) => setTextInput(e.target.value)}\n              onKeyPress={(e) => e.key === 'Enter' && handleSendText()}\n            />\n            <button \n              className=\"send-button\"\n              onClick={handleSendText}\n              disabled={isRecording || isProcessing || !textInput.trim()}\n            >\n              Send\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SimpleApp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}