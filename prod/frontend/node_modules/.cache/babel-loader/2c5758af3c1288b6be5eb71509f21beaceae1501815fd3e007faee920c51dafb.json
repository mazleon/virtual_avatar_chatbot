{"ast":null,"code":"var _jsxFileName = \"/Users/saniyasultanatuba/Downloads/Python-dev/llm/video_agent/prod/frontend/src/SimpleApp.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './index.css';\n\n// API endpoint configuration\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:5000';\nfunction SimpleApp() {\n  _s();\n  // State variables\n  const [isRecording, setIsRecording] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [messages, setMessages] = useState([{\n    sender: 'System',\n    text: 'Welcome to the Voice Agent demo. Click \"Start Recording\" to begin.'\n  }]);\n  const [audioStream, setAudioStream] = useState(null);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [audioChunks, setAudioChunks] = useState([]);\n  const [apiStatus, setApiStatus] = useState('unknown');\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [volume, setVolume] = useState(0);\n\n  // Refs\n  const timerRef = useRef(null);\n  const animationRef = useRef(null);\n  const audioAnalyserRef = useRef(null);\n  const audioDataRef = useRef(null);\n  const messagesEndRef = useRef(null);\n\n  // Check API connection on mount\n  useEffect(() => {\n    checkApiConnection();\n\n    // Clean up on unmount\n    return () => {\n      if (timerRef.current) clearInterval(timerRef.current);\n      if (animationRef.current) cancelAnimationFrame(animationRef.current);\n      if (audioStream) {\n        audioStream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, []);\n\n  // Auto-scroll to the bottom of messages\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n\n  // Format recording time as MM:SS\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60).toString().padStart(2, '0');\n    const secs = (seconds % 60).toString().padStart(2, '0');\n    return `${mins}:${secs}`;\n  };\n\n  // Check if the API server is running\n  const checkApiConnection = async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/health`);\n      if (response.ok) {\n        setApiStatus('connected');\n        addMessage('System', 'Connected to API server successfully.');\n      } else {\n        setApiStatus('error');\n        addMessage('System', 'Error connecting to API server. Check if it\\'s running.');\n      }\n    } catch (err) {\n      console.error('API connection error:', err);\n      setApiStatus('error');\n      addMessage('System', `Error connecting to API server: ${err.message}. Make sure the server is running at ${API_BASE_URL}`);\n    }\n  };\n\n  // Start recording from microphone\n  const startRecording = async () => {\n    try {\n      // Clear previous audio chunks\n      setAudioChunks([]);\n\n      // Request access to the microphone\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      setAudioStream(stream);\n\n      // Set up audio analysis for visualization\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      const analyser = audioContext.createAnalyser();\n      analyser.fftSize = 256;\n      const audioSource = audioContext.createMediaStreamSource(stream);\n      audioSource.connect(analyser);\n\n      // Store the analyser for later use\n      audioAnalyserRef.current = analyser;\n      audioDataRef.current = new Uint8Array(analyser.frequencyBinCount);\n\n      // Start visualization\n      visualizeAudio();\n\n      // Create a new MediaRecorder instance\n      const recorder = new MediaRecorder(stream, {\n        mimeType: 'audio/webm'\n      });\n      setMediaRecorder(recorder);\n\n      // Event handler for when data is available\n      recorder.ondataavailable = e => {\n        if (e.data.size > 0) {\n          setAudioChunks(chunks => [...chunks, e.data]);\n        }\n      };\n\n      // Start recording\n      recorder.start(200); // Collect data every 200ms\n      setIsRecording(true);\n      addMessage('System', 'Recording started. Speak now...');\n\n      // Start timer\n      setRecordingTime(0);\n      timerRef.current = setInterval(() => {\n        setRecordingTime(prevTime => prevTime + 1);\n      }, 1000);\n    } catch (err) {\n      console.error('Error starting recording:', err);\n      addMessage('System', `Error starting recording: ${err.message}`);\n    }\n  };\n\n  // Visualize audio input\n  const visualizeAudio = () => {\n    if (!audioAnalyserRef.current) return;\n    const analyser = audioAnalyserRef.current;\n    const dataArray = audioDataRef.current;\n\n    // Get volume data\n    analyser.getByteFrequencyData(dataArray);\n\n    // Calculate volume level (average of frequency data)\n    const average = dataArray.reduce((acc, val) => acc + val, 0) / dataArray.length;\n    setVolume(average);\n\n    // Continue animation\n    animationRef.current = requestAnimationFrame(visualizeAudio);\n  };\n\n  // Stop recording\n  const stopRecording = () => {\n    if (mediaRecorder && isRecording) {\n      // Stop the recording\n      mediaRecorder.stop();\n      setIsRecording(false);\n      addMessage('System', 'Recording stopped. Processing audio...');\n\n      // Stop the timer\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n        timerRef.current = null;\n      }\n\n      // Stop the visualization\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n        animationRef.current = null;\n      }\n\n      // Stop all tracks in the stream\n      if (audioStream) {\n        audioStream.getTracks().forEach(track => track.stop());\n        setAudioStream(null);\n      }\n\n      // Process the recorded audio after a short delay to ensure all chunks are collected\n      setTimeout(() => {\n        if (audioChunks.length > 0) {\n          const audioBlob = new Blob(audioChunks, {\n            type: 'audio/webm'\n          });\n          processAudio(audioBlob);\n        } else {\n          addMessage('System', 'No audio recorded. Please try again.');\n        }\n      }, 300);\n    }\n  };\n\n  // Process audio with the API\n  const processAudio = async audioBlob => {\n    try {\n      setIsProcessing(true);\n      addMessage('System', 'Processing audio...');\n\n      // Create a FormData object to send the audio file\n      const formData = new FormData();\n      formData.append('audio', audioBlob);\n\n      // Send the audio to the backend for processing\n      const response = await fetch(`${API_BASE_URL}/api/process-audio`, {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        let errorMessage = 'Failed to process audio';\n        try {\n          const errorData = JSON.parse(errorText);\n          errorMessage = errorData.detail || errorMessage;\n        } catch (e) {\n          // If parsing fails, use the raw text\n          errorMessage = errorText || errorMessage;\n        }\n        throw new Error(errorMessage);\n      }\n      const data = await response.json();\n\n      // Add user message with transcribed text\n      addMessage('User', data.user_text);\n\n      // Add agent response\n      addMessage('Agent', data.response_text);\n\n      // Play the audio response\n      if (data.audio_id) {\n        const audioUrl = `${API_BASE_URL}/api/audio/${data.audio_id}`;\n        playAudioFromUrl(audioUrl);\n      }\n    } catch (err) {\n      console.error('Error processing audio:', err);\n      addMessage('System', `Error processing audio: ${err.message}`);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  // Play audio from URL\n  const playAudioFromUrl = url => {\n    // Create an audio element to play the response\n    const audio = new Audio(url);\n\n    // Add event listeners\n    audio.addEventListener('play', () => {\n      addMessage('System', 'Playing audio response...');\n    });\n    audio.addEventListener('ended', () => {\n      addMessage('System', 'Audio response finished.');\n    });\n    audio.addEventListener('error', e => {\n      console.error('Error playing audio:', e);\n      addMessage('System', 'Error playing audio response.');\n    });\n\n    // Play the audio\n    audio.play().catch(err => {\n      console.error('Error playing audio:', err);\n      addMessage('System', `Error playing audio: ${err.message}`);\n    });\n  };\n\n  // Add a message to the conversation\n  const addMessage = (sender, text) => {\n    setMessages(prevMessages => [...prevMessages, {\n      sender,\n      text\n    }]);\n  };\n\n  // Render the UI\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Voice Agent Demo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-bar\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `api-status ${apiStatus}`,\n        children: [\"API Status: \", apiStatus === 'connected' ? '✅ Connected' : '❌ Disconnected', apiStatus === 'error' && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: checkApiConnection,\n          className: \"retry-button\",\n          children: \"Retry Connection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: isRecording ? stopRecording : startRecording,\n        className: isRecording ? 'stop' : 'start',\n        disabled: isProcessing || apiStatus !== 'connected',\n        children: isRecording ? 'Stop Recording' : 'Start Recording'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this), isRecording && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recording-indicator\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"recording-time\",\n          children: formatTime(recordingTime)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pulse-indicator\",\n          children: \"\\uD83D\\uDD34 Recording\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"volume-meter\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"volume-level\",\n            style: {\n              width: `${Math.min(100, volume)}%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 11\n      }, this), isProcessing && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"processing-indicator\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Processing...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"conversation\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Conversation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.sender.toLowerCase()}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sender\",\n            children: msg.sender\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text\",\n            children: msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 5\n  }, this);\n}\n_s(SimpleApp, \"Br6clnav4jdznMUnl3YXufcp/Mw=\");\n_c = SimpleApp;\nexport default SimpleApp;\nvar _c;\n$RefreshReg$(_c, \"SimpleApp\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","API_BASE_URL","SimpleApp","_s","isRecording","setIsRecording","isProcessing","setIsProcessing","messages","setMessages","sender","text","audioStream","setAudioStream","mediaRecorder","setMediaRecorder","audioChunks","setAudioChunks","apiStatus","setApiStatus","recordingTime","setRecordingTime","volume","setVolume","timerRef","animationRef","audioAnalyserRef","audioDataRef","messagesEndRef","checkApiConnection","current","clearInterval","cancelAnimationFrame","getTracks","forEach","track","stop","_messagesEndRef$curre","scrollIntoView","behavior","formatTime","seconds","mins","Math","floor","toString","padStart","secs","response","fetch","ok","addMessage","err","console","error","message","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","audioContext","window","AudioContext","webkitAudioContext","analyser","createAnalyser","fftSize","audioSource","createMediaStreamSource","connect","Uint8Array","frequencyBinCount","visualizeAudio","recorder","MediaRecorder","mimeType","ondataavailable","e","data","size","chunks","start","setInterval","prevTime","dataArray","getByteFrequencyData","average","reduce","acc","val","length","requestAnimationFrame","stopRecording","setTimeout","audioBlob","Blob","type","processAudio","formData","FormData","append","method","body","errorText","errorMessage","errorData","JSON","parse","detail","Error","json","user_text","response_text","audio_id","audioUrl","playAudioFromUrl","url","Audio","addEventListener","play","catch","prevMessages","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","style","width","min","map","msg","index","toLowerCase","ref","_c","$RefreshReg$"],"sources":["/Users/saniyasultanatuba/Downloads/Python-dev/llm/video_agent/prod/frontend/src/SimpleApp.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './index.css';\n\n// API endpoint configuration\nconst API_BASE_URL = 'http://localhost:5000';\n\nfunction SimpleApp() {\n  // State variables\n  const [isRecording, setIsRecording] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [messages, setMessages] = useState([\n    { sender: 'System', text: 'Welcome to the Voice Agent demo. Click \"Start Recording\" to begin.' }\n  ]);\n  const [audioStream, setAudioStream] = useState(null);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [audioChunks, setAudioChunks] = useState([]);\n  const [apiStatus, setApiStatus] = useState('unknown');\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [volume, setVolume] = useState(0);\n  \n  // Refs\n  const timerRef = useRef(null);\n  const animationRef = useRef(null);\n  const audioAnalyserRef = useRef(null);\n  const audioDataRef = useRef(null);\n  const messagesEndRef = useRef(null);\n  \n  // Check API connection on mount\n  useEffect(() => {\n    checkApiConnection();\n    \n    // Clean up on unmount\n    return () => {\n      if (timerRef.current) clearInterval(timerRef.current);\n      if (animationRef.current) cancelAnimationFrame(animationRef.current);\n      if (audioStream) {\n        audioStream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, []);\n  \n  // Auto-scroll to the bottom of messages\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n  \n  // Format recording time as MM:SS\n  const formatTime = (seconds) => {\n    const mins = Math.floor(seconds / 60).toString().padStart(2, '0');\n    const secs = (seconds % 60).toString().padStart(2, '0');\n    return `${mins}:${secs}`;\n  };\n  \n  // Check if the API server is running\n  const checkApiConnection = async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/health`);\n      if (response.ok) {\n        setApiStatus('connected');\n        addMessage('System', 'Connected to API server successfully.');\n      } else {\n        setApiStatus('error');\n        addMessage('System', 'Error connecting to API server. Check if it\\'s running.');\n      }\n    } catch (err) {\n      console.error('API connection error:', err);\n      setApiStatus('error');\n      addMessage('System', `Error connecting to API server: ${err.message}. Make sure the server is running at ${API_BASE_URL}`);\n    }\n  };\n  \n  // Start recording from microphone\n  const startRecording = async () => {\n    try {\n      // Clear previous audio chunks\n      setAudioChunks([]);\n      \n      // Request access to the microphone\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      setAudioStream(stream);\n      \n      // Set up audio analysis for visualization\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      const analyser = audioContext.createAnalyser();\n      analyser.fftSize = 256;\n      const audioSource = audioContext.createMediaStreamSource(stream);\n      audioSource.connect(analyser);\n      \n      // Store the analyser for later use\n      audioAnalyserRef.current = analyser;\n      audioDataRef.current = new Uint8Array(analyser.frequencyBinCount);\n      \n      // Start visualization\n      visualizeAudio();\n      \n      // Create a new MediaRecorder instance\n      const recorder = new MediaRecorder(stream, { mimeType: 'audio/webm' });\n      setMediaRecorder(recorder);\n      \n      // Event handler for when data is available\n      recorder.ondataavailable = (e) => {\n        if (e.data.size > 0) {\n          setAudioChunks(chunks => [...chunks, e.data]);\n        }\n      };\n      \n      // Start recording\n      recorder.start(200); // Collect data every 200ms\n      setIsRecording(true);\n      addMessage('System', 'Recording started. Speak now...');\n      \n      // Start timer\n      setRecordingTime(0);\n      timerRef.current = setInterval(() => {\n        setRecordingTime(prevTime => prevTime + 1);\n      }, 1000);\n      \n    } catch (err) {\n      console.error('Error starting recording:', err);\n      addMessage('System', `Error starting recording: ${err.message}`);\n    }\n  };\n  \n  // Visualize audio input\n  const visualizeAudio = () => {\n    if (!audioAnalyserRef.current) return;\n    \n    const analyser = audioAnalyserRef.current;\n    const dataArray = audioDataRef.current;\n    \n    // Get volume data\n    analyser.getByteFrequencyData(dataArray);\n    \n    // Calculate volume level (average of frequency data)\n    const average = dataArray.reduce((acc, val) => acc + val, 0) / dataArray.length;\n    setVolume(average);\n    \n    // Continue animation\n    animationRef.current = requestAnimationFrame(visualizeAudio);\n  };\n  \n  // Stop recording\n  const stopRecording = () => {\n    if (mediaRecorder && isRecording) {\n      // Stop the recording\n      mediaRecorder.stop();\n      setIsRecording(false);\n      addMessage('System', 'Recording stopped. Processing audio...');\n      \n      // Stop the timer\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n        timerRef.current = null;\n      }\n      \n      // Stop the visualization\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n        animationRef.current = null;\n      }\n      \n      // Stop all tracks in the stream\n      if (audioStream) {\n        audioStream.getTracks().forEach(track => track.stop());\n        setAudioStream(null);\n      }\n      \n      // Process the recorded audio after a short delay to ensure all chunks are collected\n      setTimeout(() => {\n        if (audioChunks.length > 0) {\n          const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });\n          processAudio(audioBlob);\n        } else {\n          addMessage('System', 'No audio recorded. Please try again.');\n        }\n      }, 300);\n    }\n  };\n  \n  // Process audio with the API\n  const processAudio = async (audioBlob) => {\n    try {\n      setIsProcessing(true);\n      addMessage('System', 'Processing audio...');\n      \n      // Create a FormData object to send the audio file\n      const formData = new FormData();\n      formData.append('audio', audioBlob);\n      \n      // Send the audio to the backend for processing\n      const response = await fetch(`${API_BASE_URL}/api/process-audio`, {\n        method: 'POST',\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        let errorMessage = 'Failed to process audio';\n        try {\n          const errorData = JSON.parse(errorText);\n          errorMessage = errorData.detail || errorMessage;\n        } catch (e) {\n          // If parsing fails, use the raw text\n          errorMessage = errorText || errorMessage;\n        }\n        throw new Error(errorMessage);\n      }\n      \n      const data = await response.json();\n      \n      // Add user message with transcribed text\n      addMessage('User', data.user_text);\n      \n      // Add agent response\n      addMessage('Agent', data.response_text);\n      \n      // Play the audio response\n      if (data.audio_id) {\n        const audioUrl = `${API_BASE_URL}/api/audio/${data.audio_id}`;\n        playAudioFromUrl(audioUrl);\n      }\n      \n    } catch (err) {\n      console.error('Error processing audio:', err);\n      addMessage('System', `Error processing audio: ${err.message}`);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  \n  // Play audio from URL\n  const playAudioFromUrl = (url) => {\n    // Create an audio element to play the response\n    const audio = new Audio(url);\n    \n    // Add event listeners\n    audio.addEventListener('play', () => {\n      addMessage('System', 'Playing audio response...');\n    });\n    \n    audio.addEventListener('ended', () => {\n      addMessage('System', 'Audio response finished.');\n    });\n    \n    audio.addEventListener('error', (e) => {\n      console.error('Error playing audio:', e);\n      addMessage('System', 'Error playing audio response.');\n    });\n    \n    // Play the audio\n    audio.play().catch(err => {\n      console.error('Error playing audio:', err);\n      addMessage('System', `Error playing audio: ${err.message}`);\n    });\n  };\n  \n  // Add a message to the conversation\n  const addMessage = (sender, text) => {\n    setMessages(prevMessages => [...prevMessages, { sender, text }]);\n  };\n  \n  // Render the UI\n  return (\n    <div className=\"app-container\">\n      <h1>Voice Agent Demo</h1>\n      \n      <div className=\"status-bar\">\n        <div className={`api-status ${apiStatus}`}>\n          API Status: {apiStatus === 'connected' ? '✅ Connected' : '❌ Disconnected'}\n          {apiStatus === 'error' && (\n            <button onClick={checkApiConnection} className=\"retry-button\">\n              Retry Connection\n            </button>\n          )}\n        </div>\n      </div>\n      \n      <div className=\"controls\">\n        <button \n          onClick={isRecording ? stopRecording : startRecording}\n          className={isRecording ? 'stop' : 'start'}\n          disabled={isProcessing || apiStatus !== 'connected'}\n        >\n          {isRecording ? 'Stop Recording' : 'Start Recording'}\n        </button>\n        \n        {isRecording && (\n          <div className=\"recording-indicator\">\n            <div className=\"recording-time\">{formatTime(recordingTime)}</div>\n            <div className=\"pulse-indicator\">🔴 Recording</div>\n            <div className=\"volume-meter\">\n              <div \n                className=\"volume-level\" \n                style={{ width: `${Math.min(100, volume)}%` }}\n              />\n            </div>\n          </div>\n        )}\n        \n        {isProcessing && (\n          <div className=\"processing-indicator\">\n            <div className=\"spinner\"></div>\n            <span>Processing...</span>\n          </div>\n        )}\n      </div>\n      \n      <div className=\"conversation\">\n        <h2>Conversation</h2>\n        <div className=\"messages\">\n          {messages.map((msg, index) => (\n            <div key={index} className={`message ${msg.sender.toLowerCase()}`}>\n              <div className=\"sender\">{msg.sender}</div>\n              <div className=\"text\">{msg.text}</div>\n            </div>\n          ))}\n          <div ref={messagesEndRef} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SimpleApp;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,aAAa;;AAEpB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAG,uBAAuB;AAE5C,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,CACvC;IAAEc,MAAM,EAAE,QAAQ;IAAEC,IAAI,EAAE;EAAqE,CAAC,CACjG,CAAC;EACF,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACkB,aAAa,EAAEC,gBAAgB,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACoB,WAAW,EAAEC,cAAc,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACsB,SAAS,EAAEC,YAAY,CAAC,GAAGvB,QAAQ,CAAC,SAAS,CAAC;EACrD,MAAM,CAACwB,aAAa,EAAEC,gBAAgB,CAAC,GAAGzB,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM,CAAC0B,MAAM,EAAEC,SAAS,CAAC,GAAG3B,QAAQ,CAAC,CAAC,CAAC;;EAEvC;EACA,MAAM4B,QAAQ,GAAG1B,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAM2B,YAAY,GAAG3B,MAAM,CAAC,IAAI,CAAC;EACjC,MAAM4B,gBAAgB,GAAG5B,MAAM,CAAC,IAAI,CAAC;EACrC,MAAM6B,YAAY,GAAG7B,MAAM,CAAC,IAAI,CAAC;EACjC,MAAM8B,cAAc,GAAG9B,MAAM,CAAC,IAAI,CAAC;;EAEnC;EACAD,SAAS,CAAC,MAAM;IACdgC,kBAAkB,CAAC,CAAC;;IAEpB;IACA,OAAO,MAAM;MACX,IAAIL,QAAQ,CAACM,OAAO,EAAEC,aAAa,CAACP,QAAQ,CAACM,OAAO,CAAC;MACrD,IAAIL,YAAY,CAACK,OAAO,EAAEE,oBAAoB,CAACP,YAAY,CAACK,OAAO,CAAC;MACpE,IAAIlB,WAAW,EAAE;QACfA,WAAW,CAACqB,SAAS,CAAC,CAAC,CAACC,OAAO,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC;MACxD;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAvC,SAAS,CAAC,MAAM;IAAA,IAAAwC,qBAAA;IACd,CAAAA,qBAAA,GAAAT,cAAc,CAACE,OAAO,cAAAO,qBAAA,uBAAtBA,qBAAA,CAAwBC,cAAc,CAAC;MAAEC,QAAQ,EAAE;IAAS,CAAC,CAAC;EAChE,CAAC,EAAE,CAAC/B,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAMgC,UAAU,GAAIC,OAAO,IAAK;IAC9B,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,GAAG,EAAE,CAAC,CAACI,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IACjE,MAAMC,IAAI,GAAG,CAACN,OAAO,GAAG,EAAE,EAAEI,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IACvD,OAAO,GAAGJ,IAAI,IAAIK,IAAI,EAAE;EAC1B,CAAC;;EAED;EACA,MAAMlB,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI;MACF,MAAMmB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGhD,YAAY,SAAS,CAAC;MACtD,IAAI+C,QAAQ,CAACE,EAAE,EAAE;QACf/B,YAAY,CAAC,WAAW,CAAC;QACzBgC,UAAU,CAAC,QAAQ,EAAE,uCAAuC,CAAC;MAC/D,CAAC,MAAM;QACLhC,YAAY,CAAC,OAAO,CAAC;QACrBgC,UAAU,CAAC,QAAQ,EAAE,yDAAyD,CAAC;MACjF;IACF,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,GAAG,CAAC;MAC3CjC,YAAY,CAAC,OAAO,CAAC;MACrBgC,UAAU,CAAC,QAAQ,EAAE,mCAAmCC,GAAG,CAACG,OAAO,wCAAwCtD,YAAY,EAAE,CAAC;IAC5H;EACF,CAAC;;EAED;EACA,MAAMuD,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF;MACAvC,cAAc,CAAC,EAAE,CAAC;;MAElB;MACA,MAAMwC,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QAAEC,KAAK,EAAE;MAAK,CAAC,CAAC;MACzEhD,cAAc,CAAC4C,MAAM,CAAC;;MAEtB;MACA,MAAMK,YAAY,GAAG,KAAKC,MAAM,CAACC,YAAY,IAAID,MAAM,CAACE,kBAAkB,EAAE,CAAC;MAC7E,MAAMC,QAAQ,GAAGJ,YAAY,CAACK,cAAc,CAAC,CAAC;MAC9CD,QAAQ,CAACE,OAAO,GAAG,GAAG;MACtB,MAAMC,WAAW,GAAGP,YAAY,CAACQ,uBAAuB,CAACb,MAAM,CAAC;MAChEY,WAAW,CAACE,OAAO,CAACL,QAAQ,CAAC;;MAE7B;MACAxC,gBAAgB,CAACI,OAAO,GAAGoC,QAAQ;MACnCvC,YAAY,CAACG,OAAO,GAAG,IAAI0C,UAAU,CAACN,QAAQ,CAACO,iBAAiB,CAAC;;MAEjE;MACAC,cAAc,CAAC,CAAC;;MAEhB;MACA,MAAMC,QAAQ,GAAG,IAAIC,aAAa,CAACnB,MAAM,EAAE;QAAEoB,QAAQ,EAAE;MAAa,CAAC,CAAC;MACtE9D,gBAAgB,CAAC4D,QAAQ,CAAC;;MAE1B;MACAA,QAAQ,CAACG,eAAe,GAAIC,CAAC,IAAK;QAChC,IAAIA,CAAC,CAACC,IAAI,CAACC,IAAI,GAAG,CAAC,EAAE;UACnBhE,cAAc,CAACiE,MAAM,IAAI,CAAC,GAAGA,MAAM,EAAEH,CAAC,CAACC,IAAI,CAAC,CAAC;QAC/C;MACF,CAAC;;MAED;MACAL,QAAQ,CAACQ,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;MACrB9E,cAAc,CAAC,IAAI,CAAC;MACpB8C,UAAU,CAAC,QAAQ,EAAE,iCAAiC,CAAC;;MAEvD;MACA9B,gBAAgB,CAAC,CAAC,CAAC;MACnBG,QAAQ,CAACM,OAAO,GAAGsD,WAAW,CAAC,MAAM;QACnC/D,gBAAgB,CAACgE,QAAQ,IAAIA,QAAQ,GAAG,CAAC,CAAC;MAC5C,CAAC,EAAE,IAAI,CAAC;IAEV,CAAC,CAAC,OAAOjC,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEF,GAAG,CAAC;MAC/CD,UAAU,CAAC,QAAQ,EAAE,6BAA6BC,GAAG,CAACG,OAAO,EAAE,CAAC;IAClE;EACF,CAAC;;EAED;EACA,MAAMmB,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAI,CAAChD,gBAAgB,CAACI,OAAO,EAAE;IAE/B,MAAMoC,QAAQ,GAAGxC,gBAAgB,CAACI,OAAO;IACzC,MAAMwD,SAAS,GAAG3D,YAAY,CAACG,OAAO;;IAEtC;IACAoC,QAAQ,CAACqB,oBAAoB,CAACD,SAAS,CAAC;;IAExC;IACA,MAAME,OAAO,GAAGF,SAAS,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,EAAE,CAAC,CAAC,GAAGL,SAAS,CAACM,MAAM;IAC/ErE,SAAS,CAACiE,OAAO,CAAC;;IAElB;IACA/D,YAAY,CAACK,OAAO,GAAG+D,qBAAqB,CAACnB,cAAc,CAAC;EAC9D,CAAC;;EAED;EACA,MAAMoB,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAIhF,aAAa,IAAIV,WAAW,EAAE;MAChC;MACAU,aAAa,CAACsB,IAAI,CAAC,CAAC;MACpB/B,cAAc,CAAC,KAAK,CAAC;MACrB8C,UAAU,CAAC,QAAQ,EAAE,wCAAwC,CAAC;;MAE9D;MACA,IAAI3B,QAAQ,CAACM,OAAO,EAAE;QACpBC,aAAa,CAACP,QAAQ,CAACM,OAAO,CAAC;QAC/BN,QAAQ,CAACM,OAAO,GAAG,IAAI;MACzB;;MAEA;MACA,IAAIL,YAAY,CAACK,OAAO,EAAE;QACxBE,oBAAoB,CAACP,YAAY,CAACK,OAAO,CAAC;QAC1CL,YAAY,CAACK,OAAO,GAAG,IAAI;MAC7B;;MAEA;MACA,IAAIlB,WAAW,EAAE;QACfA,WAAW,CAACqB,SAAS,CAAC,CAAC,CAACC,OAAO,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC;QACtDvB,cAAc,CAAC,IAAI,CAAC;MACtB;;MAEA;MACAkF,UAAU,CAAC,MAAM;QACf,IAAI/E,WAAW,CAAC4E,MAAM,GAAG,CAAC,EAAE;UAC1B,MAAMI,SAAS,GAAG,IAAIC,IAAI,CAACjF,WAAW,EAAE;YAAEkF,IAAI,EAAE;UAAa,CAAC,CAAC;UAC/DC,YAAY,CAACH,SAAS,CAAC;QACzB,CAAC,MAAM;UACL7C,UAAU,CAAC,QAAQ,EAAE,sCAAsC,CAAC;QAC9D;MACF,CAAC,EAAE,GAAG,CAAC;IACT;EACF,CAAC;;EAED;EACA,MAAMgD,YAAY,GAAG,MAAOH,SAAS,IAAK;IACxC,IAAI;MACFzF,eAAe,CAAC,IAAI,CAAC;MACrB4C,UAAU,CAAC,QAAQ,EAAE,qBAAqB,CAAC;;MAE3C;MACA,MAAMiD,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEN,SAAS,CAAC;;MAEnC;MACA,MAAMhD,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGhD,YAAY,oBAAoB,EAAE;QAChEsG,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEJ;MACR,CAAC,CAAC;MAEF,IAAI,CAACpD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAMuD,SAAS,GAAG,MAAMzD,QAAQ,CAACrC,IAAI,CAAC,CAAC;QACvC,IAAI+F,YAAY,GAAG,yBAAyB;QAC5C,IAAI;UACF,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACJ,SAAS,CAAC;UACvCC,YAAY,GAAGC,SAAS,CAACG,MAAM,IAAIJ,YAAY;QACjD,CAAC,CAAC,OAAO3B,CAAC,EAAE;UACV;UACA2B,YAAY,GAAGD,SAAS,IAAIC,YAAY;QAC1C;QACA,MAAM,IAAIK,KAAK,CAACL,YAAY,CAAC;MAC/B;MAEA,MAAM1B,IAAI,GAAG,MAAMhC,QAAQ,CAACgE,IAAI,CAAC,CAAC;;MAElC;MACA7D,UAAU,CAAC,MAAM,EAAE6B,IAAI,CAACiC,SAAS,CAAC;;MAElC;MACA9D,UAAU,CAAC,OAAO,EAAE6B,IAAI,CAACkC,aAAa,CAAC;;MAEvC;MACA,IAAIlC,IAAI,CAACmC,QAAQ,EAAE;QACjB,MAAMC,QAAQ,GAAG,GAAGnH,YAAY,cAAc+E,IAAI,CAACmC,QAAQ,EAAE;QAC7DE,gBAAgB,CAACD,QAAQ,CAAC;MAC5B;IAEF,CAAC,CAAC,OAAOhE,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEF,GAAG,CAAC;MAC7CD,UAAU,CAAC,QAAQ,EAAE,2BAA2BC,GAAG,CAACG,OAAO,EAAE,CAAC;IAChE,CAAC,SAAS;MACRhD,eAAe,CAAC,KAAK,CAAC;IACxB;EACF,CAAC;;EAED;EACA,MAAM8G,gBAAgB,GAAIC,GAAG,IAAK;IAChC;IACA,MAAMzD,KAAK,GAAG,IAAI0D,KAAK,CAACD,GAAG,CAAC;;IAE5B;IACAzD,KAAK,CAAC2D,gBAAgB,CAAC,MAAM,EAAE,MAAM;MACnCrE,UAAU,CAAC,QAAQ,EAAE,2BAA2B,CAAC;IACnD,CAAC,CAAC;IAEFU,KAAK,CAAC2D,gBAAgB,CAAC,OAAO,EAAE,MAAM;MACpCrE,UAAU,CAAC,QAAQ,EAAE,0BAA0B,CAAC;IAClD,CAAC,CAAC;IAEFU,KAAK,CAAC2D,gBAAgB,CAAC,OAAO,EAAGzC,CAAC,IAAK;MACrC1B,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEyB,CAAC,CAAC;MACxC5B,UAAU,CAAC,QAAQ,EAAE,+BAA+B,CAAC;IACvD,CAAC,CAAC;;IAEF;IACAU,KAAK,CAAC4D,IAAI,CAAC,CAAC,CAACC,KAAK,CAACtE,GAAG,IAAI;MACxBC,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEF,GAAG,CAAC;MAC1CD,UAAU,CAAC,QAAQ,EAAE,wBAAwBC,GAAG,CAACG,OAAO,EAAE,CAAC;IAC7D,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMJ,UAAU,GAAGA,CAACzC,MAAM,EAAEC,IAAI,KAAK;IACnCF,WAAW,CAACkH,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAE;MAAEjH,MAAM;MAAEC;IAAK,CAAC,CAAC,CAAC;EAClE,CAAC;;EAED;EACA,oBACEX,OAAA;IAAK4H,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC5B7H,OAAA;MAAA6H,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEzBjI,OAAA;MAAK4H,SAAS,EAAC,YAAY;MAAAC,QAAA,eACzB7H,OAAA;QAAK4H,SAAS,EAAE,cAAc1G,SAAS,EAAG;QAAA2G,QAAA,GAAC,cAC7B,EAAC3G,SAAS,KAAK,WAAW,GAAG,aAAa,GAAG,gBAAgB,EACxEA,SAAS,KAAK,OAAO,iBACpBlB,OAAA;UAAQkI,OAAO,EAAErG,kBAAmB;UAAC+F,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAC;QAE9D;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CACT;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENjI,OAAA;MAAK4H,SAAS,EAAC,UAAU;MAAAC,QAAA,gBACvB7H,OAAA;QACEkI,OAAO,EAAE9H,WAAW,GAAG0F,aAAa,GAAGtC,cAAe;QACtDoE,SAAS,EAAExH,WAAW,GAAG,MAAM,GAAG,OAAQ;QAC1C+H,QAAQ,EAAE7H,YAAY,IAAIY,SAAS,KAAK,WAAY;QAAA2G,QAAA,EAEnDzH,WAAW,GAAG,gBAAgB,GAAG;MAAiB;QAAA0H,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7C,CAAC,EAER7H,WAAW,iBACVJ,OAAA;QAAK4H,SAAS,EAAC,qBAAqB;QAAAC,QAAA,gBAClC7H,OAAA;UAAK4H,SAAS,EAAC,gBAAgB;UAAAC,QAAA,EAAErF,UAAU,CAACpB,aAAa;QAAC;UAAA0G,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACjEjI,OAAA;UAAK4H,SAAS,EAAC,iBAAiB;UAAAC,QAAA,EAAC;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACnDjI,OAAA;UAAK4H,SAAS,EAAC,cAAc;UAAAC,QAAA,eAC3B7H,OAAA;YACE4H,SAAS,EAAC,cAAc;YACxBQ,KAAK,EAAE;cAAEC,KAAK,EAAE,GAAG1F,IAAI,CAAC2F,GAAG,CAAC,GAAG,EAAEhH,MAAM,CAAC;YAAI;UAAE;YAAAwG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/C;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CACN,EAEA3H,YAAY,iBACXN,OAAA;QAAK4H,SAAS,EAAC,sBAAsB;QAAAC,QAAA,gBACnC7H,OAAA;UAAK4H,SAAS,EAAC;QAAS;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC/BjI,OAAA;UAAA6H,QAAA,EAAM;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvB,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eAENjI,OAAA;MAAK4H,SAAS,EAAC,cAAc;MAAAC,QAAA,gBAC3B7H,OAAA;QAAA6H,QAAA,EAAI;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrBjI,OAAA;QAAK4H,SAAS,EAAC,UAAU;QAAAC,QAAA,GACtBrH,QAAQ,CAAC+H,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACvBzI,OAAA;UAAiB4H,SAAS,EAAE,WAAWY,GAAG,CAAC9H,MAAM,CAACgI,WAAW,CAAC,CAAC,EAAG;UAAAb,QAAA,gBAChE7H,OAAA;YAAK4H,SAAS,EAAC,QAAQ;YAAAC,QAAA,EAAEW,GAAG,CAAC9H;UAAM;YAAAoH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eAC1CjI,OAAA;YAAK4H,SAAS,EAAC,MAAM;YAAAC,QAAA,EAAEW,GAAG,CAAC7H;UAAI;YAAAmH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA,GAF9BQ,KAAK;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAGV,CACN,CAAC,eACFjI,OAAA;UAAK2I,GAAG,EAAE/G;QAAe;UAAAkG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC9H,EAAA,CA3TQD,SAAS;AAAA0I,EAAA,GAAT1I,SAAS;AA6TlB,eAAeA,SAAS;AAAC,IAAA0I,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}